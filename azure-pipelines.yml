# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

jobs:

####### Test the build on Ubuntu ########
- job: 'Ubuntu_Test'
  pool:
    vmImage: 'Ubuntu 16.04'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
    maxParallel: 4

  steps:
  # Create and activate a Conda environment. See https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/package/conda-environment?view=vsts
  - task: CondaEnvironment@1
    inputs:
      createCustomEnvironment: true
      environmentName: test-environment
      packageSpecs: 'python=3.6 Pillow Cython==0.25.2'

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: python -m pip install --upgrade pip && pip install -r requirements.txt
    displayName: 'Install pip dependencies'

  - script: |
      pip install pytest
      pytest tests --doctest-modules --junitxml=junit/test-results.xml
    displayName: 'pytest'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()

####### Publish on Ubuntu ########
- job: 'Publish'
  dependsOn: 'Ubuntu_Test'
  pool:
    vmImage: 'Ubuntu 16.04'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      architecture: 'x64'

  - script: python setup.py sdist
    displayName: 'Build sdist'


####### Test the build on Windows ########
- job: 'Windows_Test'
  pool:
    vmImage: 'vs2017-win2016'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
    maxParallel: 4

  steps:
  # Create and activate a Conda environment. See https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/package/conda-environment?view=vsts
  - task: CondaEnvironment@1
    inputs:
      createCustomEnvironment: true
      environmentName: test-environment
      packageSpecs: 'python=3.6 Pillow Cython==0.25.2'

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: python -m pip install --upgrade pip && pip install -r requirements.txt
    displayName: 'Install pip dependencies'

  - script: |
      pip install pytest
      pytest tests --doctest-modules --junitxml=junit/test-results.xml
    displayName: 'pytest'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()

