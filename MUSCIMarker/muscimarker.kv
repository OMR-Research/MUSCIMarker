#:kivy 1.9.1
#:import os os
#:import mm muscimarker_io
#:import Factory kivy.factory.Factory

#############################################################################
# Action bar style

# Taken from Showcase example:
<ActionSpinnerOptions@SpinnerOption>
    background_color: .4, .4, .4, 1

<ActionSpinner@Spinner+ActionItem>
    canvas.before:
        Color:
            rgba: 0.128, 0.128, 0.128, 1
        Rectangle:
            size: self.size
            pos: self.pos
    border: 27, 20, 12, 12
    option_cls: Factory.ActionSpinnerOptions

    text_size: self.size
    valign: 'middle'
    halign: 'center'

##############################################################################
# Commands style

<MLClassSelectionSpinnerOption@SpinnerOption>
    height: 37

##############################################################################
# For in-app messages
<MessagePopup@Popup>:
    title: 'Message'
    content: app.message

    # size_hint: None, None
    # pos_hint: 0.5, 0.0
    # size: 1000, 400

    Button:
        id: message_ok_button
        on_release: self.dismiss()



##############################################################################
#
# The tool selection UI element
#

<ToolSelectionButton@ToggleButton>
    group: 'tool_selection_button_group'
    canvas.before:
        Color:
            rgba: 0.128, 0.128, 0.128, 1
        Rectangle:
            size: self.size
            pos: self.pos
    border: 27, 20, 12, 12
    size_hint: 1.0, 0.1

    name: '_default'
    on_release: app.process_tool_selection(self)

<ToolSelectionLabel@Label>
    size_hint: 1.0, 0.1

<ToolSelectionSidebar@BoxLayout>:
    id: tool_selection_col
    width: 100
    size_hint: None, 1.0
    orientation: 'vertical'

    canvas.before:
        Color:
            rgba: 0.2, 0.2, 0.2, 1
            #rgba: 0.4, 0.4, 0.4, 1
        Rectangle:
            size: self.size
            pos: self.pos
    #background_color: 0.4, 0.4, 0.4, 1

    ToolSelectionLabel:
        text: 'Tools'

    # ToolSelectionButton:
    #     name: 'viewing_tool'
    #     id: viewing_tool
    #     text: 'View'

    # ToolSelectionButton:
    #     name: 'add_symbol_tool'
    #     id: add_symbol_tool
    #     text: 'Add S.'

    # ToolSelectionButton:
    #     name: 'trimmed_select_tool'
    #     id: trimmed_select_tool
    #     text: 'Trim'

    # ToolSelectionButton:
    #     name: 'lasso_select_tool'
    #     id: lasso_select_tool
    #     text: 'Lasso'

    ToolSelectionButton:
        name: 'trimmed_lasso_select_tool'
        id: trimmed_lasso_select_tool
        text: 'Trim\nLasso'

    ToolSelectionButton:
        name: 'connected_select_tool'
        id: connected_select_tool
        text: 'Conn.\nComp.'

    # ToolSelectionButton:
    #     name: 'gesture_select_tool'
    #     id: gesture_select_tool,
    #     text: 'Gesture'

    ToolSelectionButton:
        name: 'cropobject_views_select_tool'
        id: cropobject_views_select_tool,
        text: 'Obj.\nSelect'

    ToolSelectionButton:
        name: 'edge_views_select_tool'
        id: edge_views_select_tool,
        text: 'Rel.\nSelect'

    ToolSelectionButton:
        name: 'cropobject_views_parse_tool'
        id: cropobject_views_parse_tool,
        text: 'Parse'

    ToolSelectionButton:
        name: 'mask_eraser_tool'
        id: mask_eraser_tool
        text: 'Eraser\nLasso'

    ToolSelectionButton:
        name: 'mask_addition_tool'
        id: mask_addition_tool
        text: 'Plus\nLasso'

    BoxLayout:


##############################################################################
#
# The mlclasses/cropobjects window UI element
#

<FileLoadButton@Button>
    size_hint: 1.0, 0.1

    # Same as the other buttons..? Strange tricks
    # because of adding & subtracting the active/pressed/etc.
    # colors in a Button.
    background_color: 1.0, 1.0, 1.0, 1.0

    #canvas.before:
    #    Color:
    #        rgba: 0.656, 0.256, 0.256, 1.0
    #    Rectangle:
    #        size: (self.size[0] - 10, self.size[1] - 4)
    #        pos: (self.pos[0] + 5, self.pos[1] + 2)



<FileLoadDialog>:
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: 'vertical'

        FileChooserListView:
            id: filechooser
            path: root.default_path
            on_submit: root.load(filechooser.path, filechooser.selection)

        BoxLayout:
            size_hint_y: 0.07
            pos_hint_x: 0.5
            height: 50

            Button:
                text: "Cancel"
                on_release: root.cancel()

            Button:
                text: "Load"
                on_release: root.load(filechooser.path, filechooser.selection)


<FileSaveButton@Button>
    size_hint: 1.0, 0.1

    # The rectangle makes a weird white-ish rim around the button
    #canvas.before:
    #    Rectangle:
    #        size: self.size
    #        pos: self.pos
    #    Color:
    #        rgba: 0.256, 0.256, 0.256, 1.0


<FileSaveDialog>:
    BoxLayout:
        text_input: text_input
        size: root.size
        pos: root.pos
        orientation: "vertical"

        FileChooserListView:
            id: filechooser
            path: root.default_path
            on_selection: text_input.text = self.selection and self.selection[0] or ''

        TextInput:
            id: text_input
            size_hint_y: None
            height: 50
            multiline: False
            text: os.path.basename(app.image_loader.filename)[:-3] + u'xml'

        BoxLayout:
            size_hint_y: None
            height: 50
            Button:
                text: "Cancel"
                on_release: root.cancel()

            Button:
                text: "Save"
                on_release: root.save(filechooser.path, text_input.text)

##############################################################################
# Taken from https://gist.github.com/kived/742397a80d61e6be225a
<ConfirmationDialog@Popup>:
    size_hint: None, None
    size: app.root.size[0] * 0.5, app.root.size[1] * 0.2
    pos_hint: {'center_x': 0.5, 'center_y': 0.5}

	GridLayout:
		cols: 1
		padding: '12dp'

		Label:
			text: root.text
			size_hint_y: None
			height: self.texture_size[1] + dp(16)
			text_size: self.width - dp(16), None
			halign: 'center'

		BoxLayout:
			size_hint_y: None
			height: sp(48)

			Button:
				text: root.cancel_text
				on_press: root.cancel()
			Button:
				text: root.ok_text
                on_press: root.ok()


<MessageDialog@Popup>:
    size_hint: None, None
    size: app.root.size[0] * 0.5, app.root.size[1] * 0.2
    pos_hint: {'center_x': 0.5, 'center_y': 0.5}

    GridLayout:
        cols: 1
        padding: '12dp'

        Label:
            text: root.text
            size_hint_y: None
            height: self.texture_size[1] + dp(16)
            text_size: self.width - dp(16), None
            halign: 'center'

        BoxLayout:
            size_hint_y: None
            height: sp(48)

            BoxLayout:
                size_hint_y: 0.3
                background_color: 0.1, 0.1, 0.0, 1.0

            Button:
                text: root.ok_text
                on_press: root.ok()

            BoxLayout:
                size_hint_y: 0.3


##############################################################################
# Inspection popup

<InspectionPopup@Popup>:
    size_hint: None, None
    size: app.root.size[0] * 0.5, app.root.size[1] * 0.5
    pos_hint: {'center_x': 0.5, 'center_y': 0.5}


    ScatterLayout:
        id: scatter

        size: root.size
        pos_hint: {'center_x': 0.5, 'center_y': 0.5}
        do_rotation: False
        #scale: 10.0

        # canvas.before:
        #    Color:
        #        # rgba: 0.2, 0.1, 0.1, 1   ### Debugging color
        #        rgba: 0.1, 0.1, 0.1, 1     ### Production color
        #    Rectangle:
        #        self here refers to the widget i.e BoxLayout pos: self.pos
        #        size: self.size


        Image:
            id: inspected_image
            allow_stretch: True

            source: root.source

##############################################################################

<CommandSidebar@GridLayout>:
    id: settings_col
    #width: 500
    size_hint: 0.175, 1.0
    # orientation: 'vertical'
    cols: 1

    canvas.before:
        Color:
            rgba: 0.2, 0.2, 0.2, 1
            #rgba: 0.4, 0.4, 0.4, 1
        Rectangle:
            size: self.size
            pos: self.pos
    #background_color: 0.4, 0.4, 0.4, 1

    Label:
        # width: 400
        size_hint: 1.0, 0.1
        text: ''
        # text: 'Source files:'
        # color: 0.9, 0.9, 0.9, 1

    Label:
        # width: 400
        size_hint: 1.0, 0.1
        text: 'Select MLClassList'
        # color: 0.7, 0.7, 0.7, 1

    FileLoadButton:
        id: mlclass_list_load_button
        text: os.path.basename(app.mlclass_list_loader.filename)
        on_release: app.mlclass_list_loader.show_load(path=os.path.dirname(app.mlclass_list_loader.filename))

    FileLoadButton:
        id: grammar_load_button
        text: 'Select Grammar'
        on_release: app.grammar_loader.show_load(path=os.path.dirname(app.grammar_loader.filename))

    Label:
        # width: 400
        size_hint: 1.0, 0.1
        text: ''

    Label:
        # width: 400
        size_hint: 1.0, 0.1
        text: 'Select MLClass'
        # color: 0.9, 0.9, 0.9, 1

    Spinner:
        id: mlclass_selection_spinner
        # width: 400
        size_hint: 1.0, 0.1
        text: app.currently_selected_mlclass_name
        values: sorted(app.annot_model.mlclasses_by_name.keys(), key=lambda x: app.annot_model.mlclasses_by_name[x].clsid)
        on_text: app.currently_selected_mlclass_name = mlclass_selection_spinner.text

        # For tracking
        on_is_open: app._mlclass_selection_spinner_state_change(self.is_open)

        option_cls: Factory.MLClassSelectionSpinnerOption

    Label:
        size_hint: 1.0, 0.1
        text: ''

    Label:
        size_hint: 1.0, 0.1
        text: 'Select image file'

    FileLoadButton:
        id: image_load_button
        text: os.path.basename(app.image_loader.filename)
        on_release: app.image_loader.show_load(path=os.path.dirname(app.image_loader.filename))

    #Label:
    #    # width: 400
    #    size_hint: 1.0, 0.1
    #    text: os.path.basename(app.image_loader.filename)
    #    color: 0.7, 0.7, 0.7, 1

    Label:
        size_hint: 1.0, 0.1
        # text: '_____________'
        text: ''

    FileLoadButton:
        id: cropobject_list_load_button
        text: 'Import CropObjectList file'
        on_release: app.cropobject_list_loader.show_load(path=os.path.dirname(app.cropobject_list_loader.filename))

    FileSaveButton:
        id: cropobject_list_save_button
        text: 'Export CropObjectList file'
        on_release: app.cropobject_list_saver.show_save(path=os.path.dirname(app.cropobject_list_saver.last_output_path))
        # on_press: app.cropobject_list_saver.to_save = app.annot_model.export_cropobjects_string(mlclasslist_file=app.mlclass_list_loader.filename, image_file=app.image_loader.filename)

    Label:
        size_hint: 1.0, 0.1
        text: 'Last imp.: {0}'.format(os.path.basename(app.cropobject_list_loader.filename))
        color: 0.7, 0.7, 0.7, 1

    Label:
        size_hint: 1.0, 0.1
        text: ''
        # text: 'Last export dir: {0}'.format(os.path.basename(app.cropobject_list_saver.last_output_path))
        color: 0.7, 0.7, 0.7, 1

    ###########
    # How many objects & relationships are there?
    Label:
        id: cropobject_counter_label
        size_hint: 1.0, 0.1
        text: 'Objects: {0} (sel.: {1})'.format(len(app.annot_model.cropobjects), app.n_selected_cropobjects)

    Label:
        id: relationship_counter_label
        size_hint: 1.0, 0.1
        text: 'Relationships: {0} (sel.: {1})'.format(len(app.annot_model.graph.edges), app.n_selected_relationships)

    Label:
        size_hint: 1.0, 0.1
        text: ''

    Button:
        id: cropobject_clear_button
        size_hint: 1.0, 0.1
        text: 'Clear CropObjects'
        on_release: app.do_clear_cropobjects(ask=True)

    Button:
        id: cropobject_mask_button
        size_hint: 1.0, 0.1
        text: 'Hide CropObjects'
        on_release: app.cropobject_list_renderer.mask_all()

    Button:
        id: cropobject_unmask_button
        size_hint: 1.0, 0.1
        text: 'Show CropObjects'
        on_release: app.cropobject_list_renderer.unmask_all()

    Label:
        size_hint: 1.0, 0.1
        text: ''

    Button:
        id: graph_mask_button
        size_hint: 1.0, 0.1
        text: 'Hide Relationships'
        on_release: app.graph_renderer.mask_all()

    Button:
        id: graph_unmask_button
        size_hint: 1.0, 0.1
        text: 'Show Relationships'
        on_release: app.graph_renderer.unmask_all()


    Label:
        size_hint: 1.0, 0.1
        text: '____________'

    BoxLayout:
        id: command_palette
        orientation: 'vertical'

    # Displaying information on currently selected CropObjects
    ScrollView:
        size_hint: (0.8, 1.0)
        bar_width: 5
        scroll_type: ['content']

        do_scroll_x: False
        do_scroll_y: True

        bar_margin: self.width * 0.1

        GridLayout:
            id: info_panel
            orientation: 'vertical'
            cols: 1
            size_hint: (1.0, None)
            pos_hint: (None, None)

            # This is really important: doesn't scroll without it.
            height: self.minimum_height

            padding: [25, 0]

            canvas.before:
                Color:
                    rgba: 0.3, 0.3, 0.3, 0.9
                Rectangle:
                    pos: self.x + self.width * 0.1, self.y
                    size: self.width * 0.8, self.height
                #Color:
                #    rgba: 1.0, 1.0, 1.0, 0.9
                #Rectangle:
                #    pos: self.x, self.y - 1
                #    size: self.width, 4
                #Rectangle:
                #    pos: self.x, self.top - 1
                #    size: self.width, 4


    BoxLayout:
        id: command_sidebar_filler
        orientation: 'vertical'



##############################################################################
# The editor window UI element
#
<EditedImage@Image>:
    source: app.currently_edited_image_filename
    #size: app.root.ids['editor_cell'].width, 2000 / self.image_ratio
    size: 2000, 2000 / self.image_ratio
    allow_stretch: True
    size_hint: None, None
    # pos_hint: {'center_x': 0.5, 'center_y': 0.5}

    # Should move this outside the Image and into the ImageEditorLayout?

<ImageEditorLayout@ScatterLayout>:

    do_rotation: False
    size_hint: None, None
    #if edited_image is not None else (0.8, 0.8)
    size: edited_image.size if edited_image is not None else (None, None)
    #pos_hint: {'center_x': 0.5, 'center_y': 0.5}
    #pos: 0.5, 0.5

    # Capturing editor motion/scaling
    #on_transform_with_touch: app.image_transformed_with_touch(touch=args[1])
    #on_pos: app._image_moved()
    #on_scale: app._image_scaled()
    on_touch_down: app._image_touch_down(args[1])
    on_touch_up: app._image_touch_up(args[1])

    # width: self.width
    # height: self.height
    canvas.before:
        Color:
            # rgba: 0.2, 0.1, 0.1, 1   ### Debugging color
            rgba: 0.0, 0.0, 0.0, 1     ### Production color
        Rectangle:
            # self here refers to the widget i.e BoxLayout pos: self.pos
            size: self.size

    EditedImage:
        id: edited_image



<EditorWindow@RelativeLayout>:
    id: annotation_col
    cols: 1
    size_hint: 1.0, 1.0
    # pos_hint: {'center_x': 0.5, 'center_y': 0.5}
    # orientation: 'vertical'

    canvas.before:
        Color:
            # rgba: 0.1, 0.2, 0.1, 1  ### Debug color
            rgba: 0.03, 0.03, 0.03, 1    ### Production color
        Rectangle:
            size: self.size

    ImageEditorLayout:
        id: editor

##############################################################################
#
# The root layout of the application
#

MUSCIMarkerLayout:
    cols: 1


    # GridLayout:
    FloatLayout:
        id: main_area
    #    cols: 3

        ToolSelectionSidebar:
            id: tool_selection_sidebar
            pos: 0, 0

        EditorWindow:
            id: editor_cell
            pos_hint: {'x_center': 0.5, 'y_center': 0.5}
            size_hint: (1.0, 1.0)

        CommandSidebar:
            id: command_sidebar
            pos: root.width - self.width, 0


    ActionBar:
        id: actionbar
        size_hint: 0.5, None

        ActionView:
            id: av

            canvas.before:
                Color:
                    rgba: 0.0, 0.0, 0.0, 1
                Rectangle:
                    # self here refers to the widget i.e BoxLayout pos: self.pos
                    size: self.size
                Color:
                    rgba: 0.2, 0.2, 0.2, 1
                    #rgba: 0.4, 0.4, 0.4, 1
                Rectangle:
                    # self here refers to the widget i.e BoxLayout pos: self.pos
                    #pos: (self.pos[0] + 5, self.pos[1])
                    size: (self.size[0], self.size[1] - 8)

            ActionPrevious:
                with_previous: False
                on_release: pass
                app_icon: os.path.join('static', 'ufal_logo.png')
                size_hint: (None, None)
                width: 20
                height: 0
                previous_image_width: 10
                previous_image_height: 0

            ActionSeparator:
                background_image: os.path.join('static', 'ufal_logo.png')
                width: 100

            ActionSeparator:
                width: 20
                opacity: 0.0

            ActionSeparator:
                background_image: os.path.join('static', 'OMR-RG_logo_darkbackground.png')
                width: 200

            ActionSeparator:
                size_hint: (0.5, None)
                opacity: 0.0

            #ActionLabel:
            #    text: 'Commands:'

            ActionButton:
                text: 'CENTER'
                on_release: app.do_center_and_rescale_current_image_user()

            ActionButton:
                text: 'BACKUP'
                on_release: app.do_save_app_state()

            ActionButton:
                text: 'RECOVER'
                on_release: app.do_recovery_user()

            ActionButton:
                text: 'SETTINGS'
                on_release: app.open_settings()

            ActionButton:
                text: 'EXIT'
                on_release: app.exit()
